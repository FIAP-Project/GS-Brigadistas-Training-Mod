architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    neoForge {
        runs {
            data {
                data()
                programArgs("--all", "--mod", mod_id as String)
                programArgs("--existing", project(":common").file("src/main/resources").absolutePath)
                programArgs("--output", project(":common").file("src/main/generated").absolutePath)
            }
        }
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${neo_version}"

    // NeoForge Dependencies
    modImplementation "com.cerbon:cerbons_api-neoforge-${minecraft_version}:${cerbons_api_version}"

    implementation include("io.github.llamalad7:mixinextras-neoforge:${mixin_extras_version}")

    // Useful Mods
    modCompileOnlyApi "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    modRuntimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    modImplementation "curse.maven:jade-324717:${jade_version_neo}"

    // Architecture
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    atAccessWideners.add("${mod_id}.accesswidener")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
